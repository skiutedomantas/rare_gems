---
import Base from "../../layouts/Base.astro";
import GemCard from "../../components/GemCard.astro";
import "../../styles/global.css";
import "../../styles/reset.css";
import fetchApi from "../../lib/strapi.js";

export async function getStaticPaths() {
  const gems = await fetchApi({
    endpoint: "rare-gems",
    query: { populate: "*" },
    wrappedByKey: "data",
  });

  return gems.map((gem) => ({
    params: { id: gem.id.toString() },
  }));
}

const gems = await fetchApi({
  endpoint: "rare-gems",
  query: { populate: "*" },
  wrappedByKey: "data",
});

const { id } = Astro.params;
const gem = gems.find((gem) => gem.id.toString() === id);

const currentId = parseInt(id);
const minId = 85;
const maxId = 99;

const currentGemContinents = gem.continents.map(
  (continent) => continent.Continent
);

const relatedGems = gems.filter(
  (otherGem) =>
    otherGem.id !== gem.id &&
    otherGem.continents.some((continent) =>
      currentGemContinents.includes(continent.Continent)
    )
);

const displayedRelatedGems = relatedGems.slice(0, 4);
---

<style>
  .related-content {
    margin-top: 2rem;
    margin-bottom: 2rem;
    width: 100%;
  }

  h1 {
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 2rem;
  }
  .container {
    display: flex;
    flex-direction: row;
    justify-content: center;
    background-color: var(--color-champagne);
    padding: 5rem;
  }

  img {
    width: 500px;
    border-radius: 20px;
  }

  .description {
    margin-top: 1rem;
    width: 550px;
    line-height: 1.3;
  }

  h3 {
    font-size: 2rem;
  }

  .info-container {
    margin-left: 2rem;
  }

  p {
    font-size: var(--font-size-l);
    margin-top: 1.5rem;
  }

  .navigation-buttons {
    display: flex;
    justify-content: space-around;
    margin: 2rem;
  }

  .navigation-buttons button {
    padding: 1rem 1.5rem;
    font-size: var(--font-size-m);
    background-color: var(--color-champagne);
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  .navigation-buttons button:disabled {
    background-color: lightgray;
    cursor: not-allowed;
  }

  .related-gems {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    justify-content: space-around;
  }
</style>

<Base>
  <div class="container">
    <div class="img-container">
      <img src={`http://localhost:1337${gem.GemImage.url}`} alt="" />
    </div>
    <div class="info-container">
      <h3>{gem.GemName}</h3>
      <p class="description">{gem.GemDescription}</p>
      <p>Value: {gem.GemValue}</p>
      <p>Colors: {gem.colors.map((color) => color.Color).join(", ")}</p>
      <p>
        Continent: {
          gem.continents.map((continent) => continent.Continent).join(",")
        }
      </p>
      <p>
        Countries: {gem.countries.map((country) => country.Country).join(",")}
      </p>
      <p>Hardness: {gem.GemHardness}</p>
    </div>
  </div>

  <div class="related-content">
    <h1>Related Gems from the Same Continent</h1>
    <div class="related-gems">
      {displayedRelatedGems.map((relatedGem) => <GemCard gem={relatedGem} />)}
    </div>
  </div>

  <div
    class="navigation-buttons"
    data-current-id={currentId}
    data-min-id={minId}
    data-max-id={maxId}
  >
    <button id="previous-button" disabled={currentId <= minId}>Previous</button>
    <button id="next-button" disabled={currentId >= maxId}>Next</button>
  </div>
</Base>

<script>
  const navContainer = document.querySelector(".navigation-buttons");
  const prevButton = document.getElementById("previous-button");
  const nextButton = document.getElementById("next-button");

  const currentId = parseInt(navContainer.dataset.currentId);
  const minId = parseInt(navContainer.dataset.minId);
  const maxId = parseInt(navContainer.dataset.maxId);

  prevButton.addEventListener("click", () => {
    if (currentId > minId) {
      window.location.href = `/detailed/${currentId - 1}`;
    }
  });

  nextButton.addEventListener("click", () => {
    if (currentId < maxId) {
      window.location.href = `/detailed/${currentId + 1}`;
    }
  });
</script>
