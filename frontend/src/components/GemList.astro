---
import GemCard from "./GemCard.astro";
import fetchApi from "../lib/strapi";

const gems = await fetchApi(
  {
    endpoint: "rare-gems",
    query: { populate: "*" },
    wrappedByKey: "data",
  },
  {}
);

const uniqueColors = [
  ...new Set(gems.flatMap((gem) => gem.colors.map((c) => c.Color))),
];
---

<style>
  .wrapper {
    background-color: var(--color-floral-white);
  }

  .view-toggle {
    margin: 2rem;
    text-align: center;
  }

  .view-toggle button {
    background-color: var(--color-champagne);
    border: none;
    border-radius: 5px;
    font-size: var(--font-size-m);
    padding: 0.5rem 1rem;
    cursor: pointer;
    margin: 1.5rem 0.6rem;
  }

  .gem-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 2rem;
    padding: 5rem;
    list-style: none;
  }

  .gem-grid li {
    cursor: pointer;
  }

  .gem-grid li:hover {
    transform: scale(1.05);
    transition: transform 0.3s;
  }

  .gem-carousel {
    display: flex;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    gap: 2rem;
    padding: 2rem;
    list-style: none;
  }

  .gem-carousel li {
    flex: 0 0 auto;
    scroll-snap-align: start;
    background-color: var(--color-champagne);
    border-radius: 8px;
    width: 250px;
    padding: 1rem;
  }

  h3 {
    text-align: center;
    font-size: 3rem;
    font-weight: 600;
    margin-top: 5rem;
    margin-bottom: -1.5rem;
  }

  .filter-container {
    text-align: center;
    margin-top: -1rem;
  }

  #filter-dropdown {
    font-size: var(--font-size-m);
    background-color: var(--color-champagne);
    border: none;
    padding: 0.5rem 0.3rem;
    border-radius: 5px;
  }
</style>

<h3>Gem Collection</h3>
<div class="wrapper">
  <div class="view-toggle">
    <button id="grid-view-btn">Grid View</button>
    <button id="carousel-view-btn">Carousel View</button>
  </div>

  <div class="filter-container">
    <select id="filter-dropdown">
      <option value="all">All Colors</option>
      {uniqueColors.map((color) => <option value={color}>{color}</option>)}
    </select>
  </div>

  <ul id="collection" class="gem-grid">
    {
      gems.map((gem) => (
        <li
          class="gem-card"
          data-colors={gem.colors.map((color) => color.Color).join(",")}
        >
          <GemCard gem={gem} />
        </li>
      ))
    }
  </ul>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const gridViewBtn = document.getElementById("grid-view-btn");
    const carouselViewBtn = document.getElementById("carousel-view-btn");
    const collection = document.getElementById("collection");

    gridViewBtn.addEventListener("click", () => {
      collection.classList.remove("gem-carousel");
      collection.classList.add("gem-grid");
    });

    carouselViewBtn.addEventListener("click", () => {
      collection.classList.remove("gem-grid");
      collection.classList.add("gem-carousel");
    });

    document
      .querySelector("#filter-dropdown")
      .addEventListener("change", (event) => {
        const selectedColor = event.target.value.toLowerCase();
        const cards = document.querySelectorAll(".gem-card");

        cards.forEach((card) => {
          const gemColors = card.dataset.colors.toLowerCase().split(",");
          if (selectedColor === "all" || gemColors.includes(selectedColor)) {
            card.style.display = "block";
          } else {
            card.style.display = "none";
          }
        });
      });
  });
</script>
