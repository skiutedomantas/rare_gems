---
import GemCard from "./GemCard.astro";

const res = await fetch("http://localhost:1337/api/rare-gems?populate=*");
const gemsResponse = await res.json();
const gems = gemsResponse.data;

const uniqueColors = [
  ...new Set(gems.flatMap((gem) => gem.colors.map((c) => c.Color))),
];
---

<style>
  .wrapper {
    background-color: var(--color-floral-white);
  }

  .filter-container {
    margin: 2rem;
    text-align: center;
  }

  .gem-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 2rem;
    padding: 5rem;
    list-style: none;
  }

  .gem-grid li {
    cursor: pointer;
  }

  .gem-grid li:hover {
    transform: scale(1.05);
    transition: transform 0.3s;
  }

  h3 {
    text-align: center;
    font-size: 3rem;
    font-weight: 600;
    margin-top: 5rem;
    margin-bottom: -1.5rem;
  }
</style>

<h3>Gem Collection</h3>
<div class="wrapper">
  <div class="filter-container">
    <select id="filter-dropdown">
      <option value="all">All Colors</option>
      {uniqueColors.map((color) => <option value={color}>{color}</option>)}
    </select>
  </div>

  <ul id="collection" class="gem-grid">
    {
      gems.map((gem) => (
        <li
          class="gem-card"
          data-colors={gem.colors.map((color) => color.Color).join(",")}
        >
          <GemCard gem={gem} />
        </li>
      ))
    }
  </ul>
</div>

<script>
  document
    .querySelector("#filter-dropdown")
    .addEventListener("change", (event) => {
      const selectedColor = event.target.value.toLowerCase();
      const cards = document.querySelectorAll(".gem-card");

      cards.forEach((card) => {
        const gemColors = card.dataset.colors.toLowerCase().split(",");
        if (selectedColor === "all" || gemColors.includes(selectedColor)) {
          card.style.display = "block";
        } else {
          card.style.display = "none";
        }
      });
    });
</script>
